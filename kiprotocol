#! /usr/bin/python2 -B

import xml.dom.minidom, urllib2, ldap, re

IANA = 'http://www.iana.org/assignments/'
PROTOCOL_URL = IANA + \
  'protocol-numbers/protocol-numbers.xml'
XMLNS = 'http://www.iana.org/assignments'

BINDDN = 'cn=root,dc=kiwilight,dc=com'
HOST = 'ldap://127.0.0.1:389/'
with open('/etc/ldap.secret') as file:
  password = file.read().strip()

handle = urllib2.urlopen(PROTOCOL_URL)
root = xml.dom.minidom.parse(handle)
remote = root.getElementsByTagName('record')
for element in remote: element.normalize()

def extract(node, name, default = None):
  node = node.getElementsByTagName(name)
  if (len(node) == 0): return default
  return node[0].firstChild.data.strip()

def conform(node):
  name = str(extract(node, 'name', 'none'))
  name = name.lower().replace(' ', '-')
  pkid = str(extract(node, 'value', -1))
  attr = 'description'
  text = str(extract(node, attr, 'None'))
  text = text[0].upper() + text[1:]
  text = re.sub(r'[\s\n]+', ' ', text)
  return dict(pkid=pkid, name=name, text=text)

remote = [ conform(item) for item in remote ]
remote = [ item for
  item in remote if item['pkid'].isdigit() ]
remote = [ item for
  item in remote if item['name'] != 'none' ]

handle = ldap.initialize(HOST)
handle.simple_bind_s(BINDDN, password)

def conform(item):
  name = item[1]['cn'][0]
  attr = 'ipProtocolNumber'
  pkid = item[1][attr][0]
  attr = 'description'
  text = item[1][attr][0]
  return dict(pkid=pkid, name=name, text=text)

BASE = 'ou=protocols,dc=kiwilight,dc=com'
SCOPE = ldap.SCOPE_ONELEVEL
FILTER = '(objectClass=ipProtocol)'
RDN = 'cn=%s,' + BASE

record = handle.search_s(BASE, SCOPE, FILTER)
record = [ conform(item) for item in record ]

remote_name = [ i['name'] for i in remote ]
record_name = [ i['name'] for i in record ]

insert_name = [ i for
  i in remote_name if i not in record_name ]
delete_name = [ i for
  i in record_name if i not in remote_name ]
insert_list = [ i for
  i in remote if i['name'] in insert_name ]
delete_list = [ i for
  i in record if i['name'] in delete_name ]
update_list = [ i for i in remote if i not
  in record and i['name'] not in insert_name ]

def insert(handle, item):
  print('Insert %(pkid)s = "%(name)s"' % item)
  l = [ ('objectClass', 'ipProtocol') ]
  l.append(('ipProtocolNumber', item['pkid']))
  l.append(('description', item['text']))
  name = ldap.dn.escape_dn_chars(item['name'])
  return handle.add_s(RDN % name, l)

def delete(handle, item):
  print('Delete %(pkid)s = "%(name)s"' % item)
  name = ldap.dn.escape_dn_chars(item['name'])
  return handle.delete_s(RDN % name)

def update(handle, item):
  print('Update %(pkid)s = "%(name)s"' % item)
  name = ldap.dn.escape_dn_chars(item['name'])
  handle.delete_s(RDN % name)
  l = [ ('objectClass', 'ipProtocol') ]
  l.append(('ipProtocolNumber', item['pkid']))
  l.append(('description', item['text']))
  return handle.add_s(RDN % name, l)

for item in insert_list: insert(handle, item)
for item in delete_list: delete(handle, item)
for item in update_list: update(handle, item)
